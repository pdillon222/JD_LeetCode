#include <iostream>
#include <stdio.h>
#include <vector>
#include <string>
using namespace std;

/* - refresher on arrays
int int_array[3] = {str_scan, start_substr, end_substr};
for (int i=0; i<(sizeof(int_array)/sizeof(int_array[0])); i++)
  cout << int_array[i] << endl;
*/

class Solution{
  public:
    string reverseWords(string s){
      string reversed;
      int str_scan, start_substr, end_substr;  
      bool blank_flag, all_blanks;
      all_blanks = blank_flag = true;
      str_scan = start_substr = end_substr = s.length() - 1;
      if (s == "") return s;
      while (str_scan >= 0){
        if (s[str_scan] != ' ' && blank_flag){
          blank_flag = false;
          end_substr = str_scan;
        }
        if (s[str_scan] == ' ' && ! blank_flag){
          blank_flag = true;
          all_blanks = false;
          start_substr = str_scan + 1;
          reversed += s.substr(start_substr, end_substr - str_scan);
          reversed += ' ';
        }   
        str_scan--;
      }
      if (str_scan == -1 && s[0] != ' '){
        reversed += s.substr(0, end_substr + 1);
      }
      reversed = (all_blanks) ? "" : reversed;
      if (reversed[reversed.length()-1] == ' '){
        reversed.pop_back();
      }
      return reversed;
    };
};


int main(){
  Solution sol;
  string test_string;
  vector<string> test_strings = {
    "  a good  example  ",
    "the sky is blue",
    "  hello world!  ",
    " ",
    "",
    "  ",
    "    ",
    "a"
  };

  for (auto x: test_strings){
    cout << "Testing string -> `" << x << "`" << endl;
    test_string = sol.reverseWords(x);
    cout << "String result == `" << test_string << "`" << "\n\n";
  }
  return 0;
}


/*
        if (s[str_scan] == ' '){
          // char is blank, check status of flag
          if (blank_flag){
            // another blank character found, change end_substr to str_scan
            end_substr = str_scan; 
          } else {
            // char is blank, but flag is false:
            // flip flag to true, set start_substr to str_scan + 1
            // add substring(start_substr, end_substr) + " " to reversed
            blank_flag = true;
            cout << "Adding " << s.substr(str_scan+1, (end_substr-1) - (str_scan+1)) << endl;
            reversed += s.substr(str_scan+1, end_substr - (str_scan+1));
            reversed += " "; 
          }
        } else {
          // char is not blank, check status of flag
          if (blank_flag){
            // char not blank, but flag is true:
            // flip flag to true, change end_substr to str_scan
            blank_flag = false;
            //start_substr = str_scan;
          } else {
            // char not not blank, blank flag is false:
            // nothing to do
            //start_substr = str_scan;
          }
        }
*/
