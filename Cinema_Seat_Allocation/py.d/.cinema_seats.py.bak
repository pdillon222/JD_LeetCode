#!/home/james/VirtualEnvs/jenv38/bin/python

import re
import cProfile
from typing import List, Set, Tuple, Dict
from colorama import init, Fore, Back, Style
init(autoreset=True)

"""
A cinema has n rows of seats, numbered from 1 
to n and there are ten seats in each row, 
labelled from 1 to 10 as shown in the figure above.

Given the array reservedSeats containing the 
numbers of seats already reserved, for example, 
reservedSeats[i] = [3,8] means the seat located 
in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups 
you can assign on the cinema seats. A four-person 
group occupies four adjacent seats in one single 
row. Seats across an aisle (such as [3,3] and [3,4]) 
are not considered to be adjacent, but there is an 
exceptional case on which an aisle split a four-person 
group, in that case, the aisle split a four-person 
group in the middle, which means to have two people 
on each side
"""


class Solution:
  @classmethod
  def reservationsFromFile(_file):
    '''
    - _file is a long string representing a list of lists -> [[\d,\d],[\d,\d]...]]
    - convert string to list of lists of ints
    '''
    with open('reservedSeats','r') as rs:
      reservations = [[int(seat.replace('[','').replace(']','')) 
                      for seat in _lst.split('*')] 
                      for _lst in re.sub(r'\[(\d*),(\d*)\]', r'[\1*\2]', 
                      rs.read().rstrip()[1:-1]).split(',')]
    return reservations
    
  def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
    # create the set of all reserved rows
    reserved_rows = set([seat[0] for seat in reservedSeats])
    # aggregate a counter for all non-reserved rows, max arrangements = 2 for each
    seat_combos = (n - len(reserved_rows)) * 2

    '''alternative approach:
       - single pass through reservedSeats
       - create indexer variable
       - while loop through length reserved seats w/ counter incrementer i
         - nested while loop w/ counter incrementer j:
           - while reservedSeats[j[0]] == reservedSeats[i[0]]:
             - build row
             - increment indexer variable 
    '''
    
    for row in reserved_rows:
      row_bool = [_seat not in [seat[1] 
                  for seat in reservedSeats 
                  if seat[0] == row] 
                  for _seat in range(2,10)]
      '''
      color_bool = [Back.GREEN + str(rsrvd_seat)
                    if rsrvd_seat else Back.RED + str(rsrvd_seat)
                    for rsrvd_seat in row_bool]
      '''
      #print("[" + ", ".join(color_bool) + "]")
      # arrangments -> row_bool[0:4], [2:6], [4:8]
      # print(all(row_bool[0:4]), all(row_bool[2:6]), all(row_bool[4:8]))               
      # print("\n")
      if all(row_bool[0:4]) and all(row_bool[4:8]):
        # max 4 group arrangements met - increment seat_combos by 2
        #print(f'Row {list(reserved_rows).index(row)} meets max arrangements;'
              #f'incrementing by 2')
        seat_combos += 2
      elif all(row_bool[0:4]) or all(row_bool[2:6]) or all(row_bool[4:8]):
         #print(f'Row {list(reserved_rows).index(row)} meets arrangement req;'
              #f'incrementing by 1')
         seat_combos += 1
    #print(seat_combos)
    return seat_combos     
    


if __name__=="__main__":
  n = 3
  reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
  ### values above return -> 4 ###

  n = 4
  reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
  ### values above return -> 4 ###

  n = 2646
  reservedSeats = Solution.reservationsFromFile() 
  ### answer is right -> 2084
  ### need to optimize for time -> currenty at 7228 ms

  args = (n, reservedSeats)
  solution = Solution()
  solution.maxNumberOfFamilies(*args)
  
  def profile_it():
    print("\n\nCode Profiling:\n")
    cProfile.runctx('g(x,y)', 
                    {'x': n, 
                     'y': reservedSeats, 
                     'g': solution.maxNumberOfFamilies},{})
  profile_it()
